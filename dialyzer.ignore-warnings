:0: Unknown function 'Elixir.ExUnit.Assertions':'__timeout__'/2
:0: Unknown function 'Elixir.ExUnit.Assertions':'__timeout__'/5
:0: Unknown function 'Elixir.ExUnit.Assertions':flunk/1
:0: Unknown function 'Elixir.ExUnit.Callbacks':on_exit/1
:0: Unknown function 'Elixir.Jason':decode/1
:0: Unknown function 'Elixir.Jason':'decode!'/1
:0: Unknown function 'Elixir.Jason':encode/1
:0: Unknown function 'Elixir.Jason':'encode!'/1
:0: Unknown type 'Elixir.Appsignal.Span':t/0
lib/appsignal.ex:48: The call 'Elixir.Logger':'__do_log__'(_@1::any(),<<65,112,112,83,105,103,110,97,108,32,115,116,111,112,112,105,110,103,46>>,#{'application':='appsignal', 'file':=[46 | 47 | 97 | 98 | 101 | 103 | 105 | 108 | 110 | 112 | 115 | 120,...], 'line':=48, 'mfa':={'Elixir.Appsignal','stop',1}}) will never return since it differs in the 2nd argument from the success typing arguments: (any(),fun(() -> any()),map())
lib/appsignal.ex:52: The inferred return type of config_change/3 (pid()) has nothing in common with 'ok', which is the expected return type for the callback of the 'Elixir.Application' behaviour
lib/appsignal.ex:67: The call 'Elixir.Logger':'__do_log__'(_@1::any(),<<65,112,112,83,105,103,110,97,108,32,100,105,115,97,98,108,101,100,46>>,#{'application':='appsignal', 'file':=[46 | 47 | 97 | 98 | 101 | 103 | 105 | 108 | 110 | 112 | 115 | 120,...], 'line':=67, 'mfa':={'Elixir.Appsignal','initialize',0}}) will never return since it differs in the 2nd argument from the success typing arguments: (any(),fun(() -> any()),map())
lib/appsignal.ex:70: The call 'Elixir.Logger':'__do_log__'(_@2::any(),<<65,112,112,83,105,103,110,97,108,32,115,116,97,114,116,105,110,103,46>>,#{'application':='appsignal', 'file':=[46 | 47 | 97 | 98 | 101 | 103 | 105 | 108 | 110 | 112 | 115 | 120,...], 'line':=70, 'mfa':={'Elixir.Appsignal','initialize',0}}) will never return since it differs in the 2nd argument from the success typing arguments: (any(),fun(() -> any()),map())
lib/appsignal.ex:75: The call 'Elixir.Logger':'__do_log__'(_@5::any(),<<65,112,112,83,105,103,110,97,108,32,115,116,97,114,116,101,100,46>>,#{'application':='appsignal', 'file':=[46 | 47 | 97 | 98 | 101 | 103 | 105 | 108 | 110 | 112 | 115 | 120,...], 'line':=75, 'mfa':={'Elixir.Appsignal','initialize',0}}) will never return since it differs in the 2nd argument from the success typing arguments: (any(),fun(() -> any()),map())
lib/appsignal.ex:77: The call 'Elixir.Logger':'__do_log__'(_@4::any(),<<70,97,105,108,101,100,32,116,111,32,115,116,97,114,116,32,65,112,112,83,105,103,110,97,108,46,32,80,108,101,97,115,101,32,114,117,110,32,116,104,101,32,100,105,97,103,110,111,115,101,32,116,97,115,107,32,40,104,116,116,112,115,58,47,47,100,111,99,115,46,97,112,112,115,105,103,110,97,108,46,99,111,109,47,101,108,105,120,105,114,47,99,111,109,109,97,110,100,45,108,105,110,101,47,100,105,97,103,110,111,115,101,46,104,116,109,108,41,32,116,111,32,100,101,98,117,103,32,121,111,117,114,32,105,110,115,116,97,108,108,97,116,105,111,110,46>>,#{'application':='appsignal', 'file':=[46 | 47 | 97 | 98 | 101 | 103 | 105 | 108 | 110 | 112 | 115 | 120,...], 'line':=77, 'mfa':={'Elixir.Appsignal','initialize',0}}) will never return since it differs in the 2nd argument from the success typing arguments: (any(),fun(() -> any()),map())
lib/appsignal.ex:85: The call 'Elixir.Logger':'__do_log__'(_@6::any(),<<87,97,114,110,105,110,103,58,32,78,111,32,118,97,108,105,100,32,65,112,112,83,105,103,110,97,108,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,102,111,117,110,100,44,32,99,111,110,116,105,110,117,105,110,103,32,119,105,116,104,32,65,112,112,83,105,103,110,97,108,32,109,101,116,114,105,99,115,32,100,105,115,97,98,108,101,100,46>>,#{'application':='appsignal', 'file':=[46 | 47 | 97 | 98 | 101 | 103 | 105 | 108 | 110 | 112 | 115 | 120,...], 'line':=85, 'mfa':={'Elixir.Appsignal','initialize',0}}) will never return since it differs in the 2nd argument from the success typing arguments: (any(),fun(() -> any()),map())
lib/appsignal/error/backend.ex:36: The inferred return type of handle_call/2 ({'reply','ok',_}) has nothing in common with {'remove_handler',_} | {'ok',_,_} | {'ok',_,_,'hibernate'} | {'swap_handler',_,_,_,atom() | {atom(),_},_}, which is the expected return type for the callback of the gen_event behaviour
lib/appsignal/probes/probes.ex:57: The call 'Elixir.Logger':'__do_log__'(_@3::any(),<<_:8,_:_*1>>,#{'application':='appsignal', 'file':=[1..255,...], 'line':=57, 'mfa':={'Elixir.Appsignal.Probes','handle_info',2}}) will never return since it differs in the 2nd argument from the success typing arguments: (any(),fun(() -> any()),map())
lib/appsignal/transmitter.ex:43: The call 'Elixir.Logger':'__do_log__'(_@1::any(),<<_:8,_:_*1>>,#{'application':='appsignal', 'file':=[1..255,...], 'line':=43, 'mfa':={'Elixir.Appsignal.Transmitter','options',0}}) will never return since it differs in the 2nd argument from the success typing arguments: (any(),fun(() -> any()),map())
lib/appsignal/utils/map_filter.ex:112: The call 'Elixir.Logger':'__do_log__'(_@1::any(),<<_:8,_:_*1>>,#{'application':='appsignal', 'file':=[1..255,...], 'line':=112, 'mfa':={'Elixir.Appsignal.Utils.MapFilter','merge_filters',2}}) will never return since it differs in the 2nd argument from the success typing arguments: (any(),fun(() -> any()),map())
lib/mix/tasks/appsignal.demo.ex:1: Callback info about the 'Elixir.Mix.Task' behaviour is not available
lib/mix/tasks/appsignal.demo.ex:12: The call 'Elixir.Logger':'__do_log__'(_@3::any(),<<68,101,109,111,110,115,116,114,97,116,105,111,110,32,115,97,109,112,108,101,32,100,97,116,97,32,115,101,110,116,33,10,10,73,116,32,109,97,121,32,116,97,107,101,32,97,98,111,117,116,32,97,32,109,105,110,117,116,101,32,102,111,114,32,116,104,101,32,100,97,116,97,32,116,111,32,97,112,112,101,97,114,32,111,110,32,104,116,116,112,115,58,47,47,97,112,112,115,105,103,110,97,108,46,99,111,109,47,97,99,99,111,117,110,116,115,10>>,#{'application':='appsignal', 'file':=[1..255,...], 'line':=12, 'mfa':={'Elixir.Mix.Tasks.Appsignal.Demo','run',1}}) will never return since it differs in the 2nd argument from the success typing arguments: (any(),fun(() -> any()),map())
lib/mix/tasks/appsignal.demo.ex:18: The call 'Elixir.Logger':'__do_log__'(_@2::any(),<<69,114,114,111,114,58,32,85,110,97,98,108,101,32,116,111,32,115,116,97,114,116,32,116,104,101,32,65,112,112,83,105,103,110,97,108,32,97,103,101,110,116,32,97,110,100,32,115,101,110,100,32,100,97,116,97,32,116,111,32,65,112,112,83,105,103,110,97,108,46,99,111,109,46,10,80,108,101,97,115,101,32,117,115,101,32,116,104,101,32,100,105,97,103,110,111,115,101,32,99,111,109,109,97,110,100,32,40,104,116,116,112,115,58,47,47,100,111,99,115,46,97,112,112,115,105,103,110,97,108,46,99,111,109,47,101,108,105,120,105,114,47,99,111,109,109,97,110,100,45,108,105,110,101,47,100,105,97,103,110,111,115,101,46,104,116,109,108,41,32,116,111,32,100,101,98,117,103,32,121,111,117,114,32,99,111,110,102,105,103,117,114,97,116,105,111,110,58,10,10,32,32,32,32,32,32,77,73,88,95,69,78,86,61,112,114,111,100,32,109,105,120,32,97,112,112,115,105,103,110,97,108,46,100,105,97,103,110,111,115,101,10>>,#{'application':='appsignal', 'file':=[1..255,...], 'line':=18, 'mfa':={'Elixir.Mix.Tasks.Appsignal.Demo','run',1}}) will never return since it differs in the 2nd argument from the success typing arguments: (any(),fun(() -> any()),map())
lib/mix/tasks/appsignal.diagnose.ex:1: Callback info about the 'Elixir.Mix.Task' behaviour is not available
lib/mix/tasks/appsignal.install.ex:1: Callback info about the 'Elixir.Mix.Task' behaviour is not available
